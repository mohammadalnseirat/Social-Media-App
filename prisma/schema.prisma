// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! Create User Table:
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerKId   String   @unique
  name      String?
  bio       String?
  image     String?
  website   String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //? Relationship:
  posts    Post[]
  comments Comment[]
  likes    Like[]

  //? Follows:
  followers Follows[] @relation("following") //* users who follow this user
  following Follows[] @relation("follower") //* users who this user follows

  //? Notifications:
  notifications        Notification[] @relation("userNotifications") //* Recieved notifications
  notificationsCreated Notification[] @relation("notificationCreator") //* Created notifications
}

//! Create Post Table:
model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //? Relationship:
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

//! Create Comment Table:
model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //? Relationship:
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([authorId, postId]) //* composite index Speed up queries when fetch the data.
}

//! Create Like Table:
model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  //? Relationship:
  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) //* this prevent same user like twice in the same post.
  @@index([userId, postId]) //* composite index Speed up queries when fetch the data.
}

//! Create Follow Table:
model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //! Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) //* composite primary key prevents duplicate follows
  @@index([followerId, followingId]) //* composite index for faster queries
}

//! Create Notification Table:
model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  commentId String?
  postId    String?
  createdAt DateTime         @default(now())

  //? Relationships
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}
